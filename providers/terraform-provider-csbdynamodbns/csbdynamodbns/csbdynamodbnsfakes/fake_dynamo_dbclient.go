// Code generated by counterfeiter. DO NOT EDIT.
//
//lint:file-ignore ST1000 auto-generated
package csbdynamodbnsfakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/cloudfoundry/csb-brokerpak-aws/terraform-provider-dynamodbns/csbdynamodbns"
)

type FakeDynamoDBClient struct {
	DeleteTableStub        func(context.Context, *dynamodb.DeleteTableInput, ...func(options *dynamodb.Options)) (*dynamodb.DeleteTableOutput, error)
	deleteTableMutex       sync.RWMutex
	deleteTableArgsForCall []struct {
		arg1 context.Context
		arg2 *dynamodb.DeleteTableInput
		arg3 []func(options *dynamodb.Options)
	}
	deleteTableReturns struct {
		result1 *dynamodb.DeleteTableOutput
		result2 error
	}
	deleteTableReturnsOnCall map[int]struct {
		result1 *dynamodb.DeleteTableOutput
		result2 error
	}
	ListTablesStub        func(context.Context, *dynamodb.ListTablesInput, ...func(*dynamodb.Options)) (*dynamodb.ListTablesOutput, error)
	listTablesMutex       sync.RWMutex
	listTablesArgsForCall []struct {
		arg1 context.Context
		arg2 *dynamodb.ListTablesInput
		arg3 []func(*dynamodb.Options)
	}
	listTablesReturns struct {
		result1 *dynamodb.ListTablesOutput
		result2 error
	}
	listTablesReturnsOnCall map[int]struct {
		result1 *dynamodb.ListTablesOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDynamoDBClient) DeleteTable(arg1 context.Context, arg2 *dynamodb.DeleteTableInput, arg3 ...func(options *dynamodb.Options)) (*dynamodb.DeleteTableOutput, error) {
	fake.deleteTableMutex.Lock()
	ret, specificReturn := fake.deleteTableReturnsOnCall[len(fake.deleteTableArgsForCall)]
	fake.deleteTableArgsForCall = append(fake.deleteTableArgsForCall, struct {
		arg1 context.Context
		arg2 *dynamodb.DeleteTableInput
		arg3 []func(options *dynamodb.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteTableStub
	fakeReturns := fake.deleteTableReturns
	fake.recordInvocation("DeleteTable", []interface{}{arg1, arg2, arg3})
	fake.deleteTableMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDynamoDBClient) DeleteTableCallCount() int {
	fake.deleteTableMutex.RLock()
	defer fake.deleteTableMutex.RUnlock()
	return len(fake.deleteTableArgsForCall)
}

func (fake *FakeDynamoDBClient) DeleteTableCalls(stub func(context.Context, *dynamodb.DeleteTableInput, ...func(options *dynamodb.Options)) (*dynamodb.DeleteTableOutput, error)) {
	fake.deleteTableMutex.Lock()
	defer fake.deleteTableMutex.Unlock()
	fake.DeleteTableStub = stub
}

func (fake *FakeDynamoDBClient) DeleteTableArgsForCall(i int) (context.Context, *dynamodb.DeleteTableInput, []func(options *dynamodb.Options)) {
	fake.deleteTableMutex.RLock()
	defer fake.deleteTableMutex.RUnlock()
	argsForCall := fake.deleteTableArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDynamoDBClient) DeleteTableReturns(result1 *dynamodb.DeleteTableOutput, result2 error) {
	fake.deleteTableMutex.Lock()
	defer fake.deleteTableMutex.Unlock()
	fake.DeleteTableStub = nil
	fake.deleteTableReturns = struct {
		result1 *dynamodb.DeleteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoDBClient) DeleteTableReturnsOnCall(i int, result1 *dynamodb.DeleteTableOutput, result2 error) {
	fake.deleteTableMutex.Lock()
	defer fake.deleteTableMutex.Unlock()
	fake.DeleteTableStub = nil
	if fake.deleteTableReturnsOnCall == nil {
		fake.deleteTableReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.DeleteTableOutput
			result2 error
		})
	}
	fake.deleteTableReturnsOnCall[i] = struct {
		result1 *dynamodb.DeleteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoDBClient) ListTables(arg1 context.Context, arg2 *dynamodb.ListTablesInput, arg3 ...func(*dynamodb.Options)) (*dynamodb.ListTablesOutput, error) {
	fake.listTablesMutex.Lock()
	ret, specificReturn := fake.listTablesReturnsOnCall[len(fake.listTablesArgsForCall)]
	fake.listTablesArgsForCall = append(fake.listTablesArgsForCall, struct {
		arg1 context.Context
		arg2 *dynamodb.ListTablesInput
		arg3 []func(*dynamodb.Options)
	}{arg1, arg2, arg3})
	stub := fake.ListTablesStub
	fakeReturns := fake.listTablesReturns
	fake.recordInvocation("ListTables", []interface{}{arg1, arg2, arg3})
	fake.listTablesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDynamoDBClient) ListTablesCallCount() int {
	fake.listTablesMutex.RLock()
	defer fake.listTablesMutex.RUnlock()
	return len(fake.listTablesArgsForCall)
}

func (fake *FakeDynamoDBClient) ListTablesCalls(stub func(context.Context, *dynamodb.ListTablesInput, ...func(*dynamodb.Options)) (*dynamodb.ListTablesOutput, error)) {
	fake.listTablesMutex.Lock()
	defer fake.listTablesMutex.Unlock()
	fake.ListTablesStub = stub
}

func (fake *FakeDynamoDBClient) ListTablesArgsForCall(i int) (context.Context, *dynamodb.ListTablesInput, []func(*dynamodb.Options)) {
	fake.listTablesMutex.RLock()
	defer fake.listTablesMutex.RUnlock()
	argsForCall := fake.listTablesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDynamoDBClient) ListTablesReturns(result1 *dynamodb.ListTablesOutput, result2 error) {
	fake.listTablesMutex.Lock()
	defer fake.listTablesMutex.Unlock()
	fake.ListTablesStub = nil
	fake.listTablesReturns = struct {
		result1 *dynamodb.ListTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoDBClient) ListTablesReturnsOnCall(i int, result1 *dynamodb.ListTablesOutput, result2 error) {
	fake.listTablesMutex.Lock()
	defer fake.listTablesMutex.Unlock()
	fake.ListTablesStub = nil
	if fake.listTablesReturnsOnCall == nil {
		fake.listTablesReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.ListTablesOutput
			result2 error
		})
	}
	fake.listTablesReturnsOnCall[i] = struct {
		result1 *dynamodb.ListTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoDBClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteTableMutex.RLock()
	defer fake.deleteTableMutex.RUnlock()
	fake.listTablesMutex.RLock()
	defer fake.listTablesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDynamoDBClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csbdynamodbns.DynamoDBClient = new(FakeDynamoDBClient)
