// Code generated by counterfeiter. DO NOT EDIT.
//
//lint:file-ignore ST1000 auto-generated
package csbdynamodbnsfakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/csb-brokerpak-aws/terraform-provider-dynamodbns/csbdynamodbns"
)

type FakeDynamoDBConfig struct {
	GetClientStub        func(context.Context, string, string) (csbdynamodbns.DynamoDBClient, error)
	getClientMutex       sync.RWMutex
	getClientArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getClientReturns struct {
		result1 csbdynamodbns.DynamoDBClient
		result2 error
	}
	getClientReturnsOnCall map[int]struct {
		result1 csbdynamodbns.DynamoDBClient
		result2 error
	}
	GetPrefixStub        func() string
	getPrefixMutex       sync.RWMutex
	getPrefixArgsForCall []struct {
	}
	getPrefixReturns struct {
		result1 string
	}
	getPrefixReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDynamoDBConfig) GetClient(arg1 context.Context, arg2 string, arg3 string) (csbdynamodbns.DynamoDBClient, error) {
	fake.getClientMutex.Lock()
	ret, specificReturn := fake.getClientReturnsOnCall[len(fake.getClientArgsForCall)]
	fake.getClientArgsForCall = append(fake.getClientArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetClientStub
	fakeReturns := fake.getClientReturns
	fake.recordInvocation("GetClient", []interface{}{arg1, arg2, arg3})
	fake.getClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDynamoDBConfig) GetClientCallCount() int {
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	return len(fake.getClientArgsForCall)
}

func (fake *FakeDynamoDBConfig) GetClientCalls(stub func(context.Context, string, string) (csbdynamodbns.DynamoDBClient, error)) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.GetClientStub = stub
}

func (fake *FakeDynamoDBConfig) GetClientArgsForCall(i int) (context.Context, string, string) {
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	argsForCall := fake.getClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDynamoDBConfig) GetClientReturns(result1 csbdynamodbns.DynamoDBClient, result2 error) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.GetClientStub = nil
	fake.getClientReturns = struct {
		result1 csbdynamodbns.DynamoDBClient
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoDBConfig) GetClientReturnsOnCall(i int, result1 csbdynamodbns.DynamoDBClient, result2 error) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.GetClientStub = nil
	if fake.getClientReturnsOnCall == nil {
		fake.getClientReturnsOnCall = make(map[int]struct {
			result1 csbdynamodbns.DynamoDBClient
			result2 error
		})
	}
	fake.getClientReturnsOnCall[i] = struct {
		result1 csbdynamodbns.DynamoDBClient
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoDBConfig) GetPrefix() string {
	fake.getPrefixMutex.Lock()
	ret, specificReturn := fake.getPrefixReturnsOnCall[len(fake.getPrefixArgsForCall)]
	fake.getPrefixArgsForCall = append(fake.getPrefixArgsForCall, struct {
	}{})
	stub := fake.GetPrefixStub
	fakeReturns := fake.getPrefixReturns
	fake.recordInvocation("GetPrefix", []interface{}{})
	fake.getPrefixMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDynamoDBConfig) GetPrefixCallCount() int {
	fake.getPrefixMutex.RLock()
	defer fake.getPrefixMutex.RUnlock()
	return len(fake.getPrefixArgsForCall)
}

func (fake *FakeDynamoDBConfig) GetPrefixCalls(stub func() string) {
	fake.getPrefixMutex.Lock()
	defer fake.getPrefixMutex.Unlock()
	fake.GetPrefixStub = stub
}

func (fake *FakeDynamoDBConfig) GetPrefixReturns(result1 string) {
	fake.getPrefixMutex.Lock()
	defer fake.getPrefixMutex.Unlock()
	fake.GetPrefixStub = nil
	fake.getPrefixReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDynamoDBConfig) GetPrefixReturnsOnCall(i int, result1 string) {
	fake.getPrefixMutex.Lock()
	defer fake.getPrefixMutex.Unlock()
	fake.GetPrefixStub = nil
	if fake.getPrefixReturnsOnCall == nil {
		fake.getPrefixReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPrefixReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDynamoDBConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	fake.getPrefixMutex.RLock()
	defer fake.getPrefixMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDynamoDBConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csbdynamodbns.DynamoDBConfig = new(FakeDynamoDBConfig)
